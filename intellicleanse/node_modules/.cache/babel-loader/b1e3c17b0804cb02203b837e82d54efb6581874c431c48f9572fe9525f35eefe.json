{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\intellicleanse\\\\intellicleanse\\\\src\\\\components\\\\RedundancyCleaning.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./RedundancyCleaning.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RedundancyCleaning = () => {\n  _s();\n  const [dataset, setDataset] = useState(null);\n  const [cleanedData, setCleanedData] = useState(null);\n  const [summary, setSummary] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Fetch dataset from the backend\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(`${process.env.REACT_APP_API_URL}/api/get-dataset`).then(response => response.json()).then(data => {\n      setIsLoading(false);\n      if (data.error) {\n        alert(data.error);\n      } else {\n        setDataset(data);\n      }\n    }).catch(error => {\n      setIsLoading(false);\n      console.error(\"Error fetching dataset:\", error);\n      alert(\"An error occurred while fetching the data. Please try again.\");\n    });\n  }, []);\n\n  // Handle data cleaning request\n  const handleCleanData = () => {\n    if (!dataset) return;\n    setIsLoading(true);\n    fetch(`${process.env.REACT_APP_API_URL}/api/clean-data`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        data: dataset.data\n      })\n    }).then(response => response.json()).then(data => {\n      setIsLoading(false);\n      if (data.error) {\n        alert(data.error);\n      } else {\n        setCleanedData(data.cleaned_data);\n        setSummary(data.summary);\n      }\n    }).catch(error => {\n      setIsLoading(false);\n      console.error(\"Error cleaning data:\", error);\n      alert(\"An error occurred while cleaning the data. Please try again.\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"redundancy-cleaning-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Redundancy and Consistency Cleaning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Detect and clean redundant rows/columns and handle missing values.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [dataset ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Original Dataset Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: dataset.columns.map(col => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: col\n              }, col, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: dataset.data.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: Object.values(row).map((val, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: val\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 25\n              }, this))\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCleanData,\n          className: \"clean-btn\",\n          children: \"Clean Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No dataset available. Please check your connection or restart the application.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), cleanedData && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Cleaned Dataset Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: Object.keys(cleanedData[0]).map(col => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: col\n              }, col, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: cleanedData.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: Object.values(row).map((val, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: val\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 25\n              }, this))\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Cleaning Summary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Duplicates Removed: \", summary.duplicates_removed]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Missing Values Handled: \", summary.missing_values_handled]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Redundant Columns Removed: \", summary.redundant_columns_removed]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(RedundancyCleaning, \"sDMw4s7S51BUYmRh6x/cFpcEm6k=\");\n_c = RedundancyCleaning;\nexport default RedundancyCleaning;\nvar _c;\n$RefreshReg$(_c, \"RedundancyCleaning\");","map":{"version":3,"names":["React","useState","useEffect","RedundancyCleaning","dataset","setDataset","cleanedData","setCleanedData","summary","setSummary","isLoading","setIsLoading","fetch","process","env","REACT_APP_API_URL","then","response","json","data","error","alert","catch","console","handleCleanData","method","headers","body","JSON","stringify","cleaned_data","columns","map","col","row","index","Object","values","val","i","keys","duplicates_removed","missing_values_handled","redundant_columns_removed"],"sources":["C:/xampp/htdocs/intellicleanse/intellicleanse/src/components/RedundancyCleaning.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./RedundancyCleaning.css\";\r\n\r\nconst RedundancyCleaning = () => {\r\n  const [dataset, setDataset] = useState(null);\r\n  const [cleanedData, setCleanedData] = useState(null);\r\n  const [summary, setSummary] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Fetch dataset from the backend\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetch(`${process.env.REACT_APP_API_URL}/api/get-dataset`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setIsLoading(false);\r\n        if (data.error) {\r\n          alert(data.error);\r\n        } else {\r\n          setDataset(data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setIsLoading(false);\r\n        console.error(\"Error fetching dataset:\", error);\r\n        alert(\"An error occurred while fetching the data. Please try again.\");\r\n      });\r\n  }, []);\r\n\r\n  // Handle data cleaning request\r\n  const handleCleanData = () => {\r\n    if (!dataset) return;\r\n\r\n    setIsLoading(true);\r\n    fetch(`${process.env.REACT_APP_API_URL}/api/clean-data`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ data: dataset.data }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setIsLoading(false);\r\n        if (data.error) {\r\n          alert(data.error);\r\n        } else {\r\n          setCleanedData(data.cleaned_data);\r\n          setSummary(data.summary);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setIsLoading(false);\r\n        console.error(\"Error cleaning data:\", error);\r\n        alert(\"An error occurred while cleaning the data. Please try again.\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"redundancy-cleaning-container\">\r\n      <h2>Redundancy and Consistency Cleaning</h2>\r\n      <p>Detect and clean redundant rows/columns and handle missing values.</p>\r\n\r\n      {isLoading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        <>\r\n          {dataset ? (\r\n            <div>\r\n              <h3>Original Dataset Preview</h3>\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    {dataset.columns.map((col) => (\r\n                      <th key={col}>{col}</th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {dataset.data.map((row, index) => (\r\n                    <tr key={index}>\r\n                      {Object.values(row).map((val, i) => (\r\n                        <td key={i}>{val}</td>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <button onClick={handleCleanData} className=\"clean-btn\">\r\n                Clean Data\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <p>No dataset available. Please check your connection or restart the application.</p>\r\n          )}\r\n\r\n          {cleanedData && (\r\n            <div>\r\n              <h3>Cleaned Dataset Preview</h3>\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    {Object.keys(cleanedData[0]).map((col) => (\r\n                      <th key={col}>{col}</th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {cleanedData.map((row, index) => (\r\n                    <tr key={index}>\r\n                      {Object.values(row).map((val, i) => (\r\n                        <td key={i}>{val}</td>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <div className=\"summary\">\r\n                <h4>Cleaning Summary</h4>\r\n                <p>Duplicates Removed: {summary.duplicates_removed}</p>\r\n                <p>Missing Values Handled: {summary.missing_values_handled}</p>\r\n                <p>Redundant Columns Removed: {summary.redundant_columns_removed}</p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RedundancyCleaning;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}