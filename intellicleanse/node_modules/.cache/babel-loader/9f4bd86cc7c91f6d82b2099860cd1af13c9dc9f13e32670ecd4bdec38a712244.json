{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\intellicleanse\\\\intellicleanse\\\\src\\\\components\\\\DataUpload.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"./DataUpload.css\";\n\n// const DataUpload = () => {\n//   const [file, setFile] = useState(null);\n//   const navigate = useNavigate();\n\n//   const handleFileChange = (e) => {\n//     setFile(e.target.files[0]);\n//   };\n\n//   const handleUpload = async () => {\n//     if (!file) return alert(\"Please select a file.\");\n\n//     const formData = new FormData();\n//     formData.append(\"file\", file);\n\n//     try {\n//       const response = await axios.post(\"http://localhost:3000/upload\", formData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//         },\n//       });\n\n//       if (response.status === 200) {\n//         alert(\"File uploaded successfully!\");\n//         // navigate(\"/dataupload\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error uploading file:\", error);\n//       alert(\"There was an error uploading the file.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"data-upload\">\n//       <h2>Upload Dataset</h2>\n//       <div className=\"file-upload\">\n//         <input type=\"file\" accept=\".csv, .xlsx\" onChange={handleFileChange} />\n//       </div>\n//       <button onClick={handleUpload}>Upload</button>\n//     </div>\n//   );\n// };\n\n// export default DataUpload;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./DataUpload.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataUpload = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [cleanedData, setCleanedData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n  const handleUpload = async () => {\n    if (!file) return alert(\"Please select a file.\");\n    setLoading(true); // Start loading\n\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    try {\n      var _response$data;\n      const response = await axios.post(\"http://localhost:3000/data\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.data) {\n        setCleanedData(response.data.data); // Set cleaned data\n        alert(\"File uploaded and data cleaned successfully!\");\n      } else {\n        setError(\"No data available\");\n        alert(\"No data available in the file.\");\n      }\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      setError(\"Failed to upload file\");\n      alert(\"There was an error uploading the file.\");\n    } finally {\n      setLoading(false); // Stop loading\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-upload\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Dataset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".csv, .xlsx\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: loading,\n      children: loading ? \"Loading...\" : \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }, this), cleanedData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Cleaned Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(cleanedData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(DataUpload, \"+45QecYMbFg9GWeJLQBmcyxEKdY=\", false, function () {\n  return [useNavigate];\n});\n_c = DataUpload;\nexport default DataUpload;\nvar _c;\n$RefreshReg$(_c, \"DataUpload\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","DataUpload","file","setFile","cleanedData","setCleanedData","loading","setLoading","error","setError","navigate","handleFileChange","e","target","files","handleUpload","alert","formData","FormData","append","response","post","headers","data","console","color","JSON","stringify"],"sources":["C:/xampp/htdocs/intellicleanse/intellicleanse/src/components/DataUpload.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n// import \"./DataUpload.css\";\r\n\r\n// const DataUpload = () => {\r\n//   const [file, setFile] = useState(null);\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleFileChange = (e) => {\r\n//     setFile(e.target.files[0]);\r\n//   };\r\n\r\n//   const handleUpload = async () => {\r\n//     if (!file) return alert(\"Please select a file.\");\r\n\r\n//     const formData = new FormData();\r\n//     formData.append(\"file\", file);\r\n\r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:3000/upload\", formData, {\r\n//         headers: {\r\n//           \"Content-Type\": \"multipart/form-data\",\r\n//         },\r\n//       });\r\n\r\n//       if (response.status === 200) {\r\n//         alert(\"File uploaded successfully!\");\r\n//         // navigate(\"/dataupload\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error uploading file:\", error);\r\n//       alert(\"There was an error uploading the file.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"data-upload\">\r\n//       <h2>Upload Dataset</h2>\r\n//       <div className=\"file-upload\">\r\n//         <input type=\"file\" accept=\".csv, .xlsx\" onChange={handleFileChange} />\r\n//       </div>\r\n//       <button onClick={handleUpload}>Upload</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DataUpload;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"./DataUpload.css\";\r\n\r\nconst DataUpload = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [cleanedData, setCleanedData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleFileChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!file) return alert(\"Please select a file.\");\r\n\r\n    setLoading(true);  // Start loading\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    try {\r\n      const response = await axios.post(\"http://localhost:3000/data\", formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      });\r\n\r\n      if (response.data?.data) {\r\n        setCleanedData(response.data.data); // Set cleaned data\r\n        alert(\"File uploaded and data cleaned successfully!\");\r\n      } else {\r\n        setError(\"No data available\");\r\n        alert(\"No data available in the file.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error uploading file:\", error);\r\n      setError(\"Failed to upload file\");\r\n      alert(\"There was an error uploading the file.\");\r\n    } finally {\r\n      setLoading(false);  // Stop loading\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"data-upload\">\r\n      <h2>Upload Dataset</h2>\r\n      <div className=\"file-upload\">\r\n        <input\r\n          type=\"file\"\r\n          accept=\".csv, .xlsx\"\r\n          onChange={handleFileChange}\r\n        />\r\n      </div>\r\n      <button onClick={handleUpload} disabled={loading}>\r\n        {loading ? \"Loading...\" : \"Upload\"}\r\n      </button>\r\n\r\n      {/* Display error if any */}\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n\r\n      {/* Render cleaned data if available */}\r\n      {cleanedData && (\r\n        <div>\r\n          <h3>Cleaned Data:</h3>\r\n          <pre>{JSON.stringify(cleanedData, null, 2)}</pre>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataUpload;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,kBAAkB;AAAC;AAE1B,MAAMC,UAAU,GAAG,MAAM;EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMa,QAAQ,GAAGX,WAAW,EAAE;EAE9B,MAAMY,gBAAgB,GAAIC,CAAC,IAAK;IAC9BT,OAAO,CAACS,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC;EAED,MAAMC,YAAY,GAAG,YAAY;IAC/B,IAAI,CAACb,IAAI,EAAE,OAAOc,KAAK,CAAC,uBAAuB,CAAC;IAEhDT,UAAU,CAAC,IAAI,CAAC,CAAC,CAAE;;IAEnB,MAAMU,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEjB,IAAI,CAAC;IAE7B,IAAI;MAAA;MACF,MAAMkB,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,IAAI,CAAC,4BAA4B,EAAEJ,QAAQ,EAAE;QACxEK,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,sBAAIF,QAAQ,CAACG,IAAI,2CAAb,eAAeA,IAAI,EAAE;QACvBlB,cAAc,CAACe,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC;QACpCP,KAAK,CAAC,8CAA8C,CAAC;MACvD,CAAC,MAAM;QACLP,QAAQ,CAAC,mBAAmB,CAAC;QAC7BO,KAAK,CAAC,gCAAgC,CAAC;MACzC;IACF,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdgB,OAAO,CAAChB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CC,QAAQ,CAAC,uBAAuB,CAAC;MACjCO,KAAK,CAAC,wCAAwC,CAAC;IACjD,CAAC,SAAS;MACRT,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACtB;EACF,CAAC;;EAED,oBACE;IAAK,SAAS,EAAC,aAAa;IAAA,wBAC1B;MAAA,UAAI;IAAc;MAAA;MAAA;MAAA;IAAA,QAAK,eACvB;MAAK,SAAS,EAAC,aAAa;MAAA,uBAC1B;QACE,IAAI,EAAC,MAAM;QACX,MAAM,EAAC,aAAa;QACpB,QAAQ,EAAEI;MAAiB;QAAA;QAAA;QAAA;MAAA;IAC3B;MAAA;MAAA;MAAA;IAAA,QACE,eACN;MAAQ,OAAO,EAAEI,YAAa;MAAC,QAAQ,EAAET,OAAQ;MAAA,UAC9CA,OAAO,GAAG,YAAY,GAAG;IAAQ;MAAA;MAAA;MAAA;IAAA,QAC3B,EAGRE,KAAK,iBAAI;MAAG,KAAK,EAAE;QAAEiB,KAAK,EAAE;MAAM,CAAE;MAAA,UAAEjB;IAAK;MAAA;MAAA;MAAA;IAAA,QAAK,EAGhDJ,WAAW,iBACV;MAAA,wBACE;QAAA,UAAI;MAAa;QAAA;QAAA;QAAA;MAAA,QAAK,eACtB;QAAA,UAAMsB,IAAI,CAACC,SAAS,CAACvB,WAAW,EAAE,IAAI,EAAE,CAAC;MAAC;QAAA;QAAA;QAAA;MAAA,QAAO;IAAA;MAAA;MAAA;MAAA;IAAA,QAEpD;EAAA;IAAA;IAAA;IAAA;EAAA,QACG;AAEV,CAAC;AAAC,GApEIH,UAAU;EAAA,QAKGF,WAAW;AAAA;AAAA,KALxBE,UAAU;AAsEhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}