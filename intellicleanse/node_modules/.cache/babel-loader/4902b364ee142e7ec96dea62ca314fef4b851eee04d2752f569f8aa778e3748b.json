{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\intellicleanse\\\\intellicleanse\\\\src\\\\components\\\\PreviewAndProfiling.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./PreviewAndProfiling.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PreviewAndProfile = () => {\n  _s();\n  var _data$;\n  const [data, setData] = useState([]);\n  const [summary, setSummary] = useState(null);\n  useEffect(() => {\n    // Fetch data from backend\n    axios.get(\"http://localhost:3000/data\").then(response => {\n      setData(response.data);\n      generateSummary(response.data);\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  }, []);\n  const generateSummary = data => {\n    if (data.length < 1) return;\n    const headers = data[0]; // First row contains headers\n    const summary = headers.map((columnName, index) => {\n      const columnData = data.slice(1).map(row => row[index]); // Data excluding headers\n      const dataType = columnData.every(value => !isNaN(value)) ? \"Number\" : \"String\";\n      const missingValues = columnData.filter(value => value === undefined || value === null || value.trim() === \"\").length;\n      const duplicates = new Set(columnData).size !== columnData.length;\n      const statistics = dataType === \"Number\" ? calculateStatistics(columnData) : {};\n      return {\n        columnName,\n        dataType,\n        missingValues,\n        duplicates,\n        ...statistics\n      };\n    });\n    setSummary(summary);\n  };\n  const calculateStatistics = data => {\n    const numbers = data.filter(value => !isNaN(value)).map(Number);\n    if (numbers.length === 0) return {};\n    const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    return {\n      mean,\n      min,\n      max\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"preview-and-profiling\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Preview and Profiling\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-preview\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Data Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: (_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: header\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: data.slice(1).map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: cell\n            }, cellIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this))\n          }, rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), summary && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Summary Report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Column Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Data Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Missing Values\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Duplicates\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Mean\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Min\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Max\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: summary.map((col, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: col.columnName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: col.dataType\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: col.missingValues\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: col.duplicates ? \"Yes\" : \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: col.mean !== undefined ? col.mean.toFixed(2) : \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: col.min !== undefined ? col.min : \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: col.max !== undefined ? col.max : \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(PreviewAndProfile, \"eyHPvhcC2JtAiV+oypF+paaHJ8M=\");\n_c = PreviewAndProfile;\nexport default PreviewAndProfile;\nvar _c;\n$RefreshReg$(_c, \"PreviewAndProfile\");","map":{"version":3,"names":["React","useState","useEffect","axios","PreviewAndProfile","data","setData","summary","setSummary","get","then","response","generateSummary","catch","error","console","length","headers","map","columnName","index","columnData","slice","row","dataType","every","value","isNaN","missingValues","filter","undefined","trim","duplicates","Set","size","statistics","calculateStatistics","numbers","Number","mean","reduce","sum","num","min","Math","max","header","rowIndex","cell","cellIndex","col","toFixed"],"sources":["C:/xampp/htdocs/intellicleanse/intellicleanse/src/components/PreviewAndProfiling.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./PreviewAndProfiling.css\";\r\n\r\nconst PreviewAndProfile = () => {\r\n  const [data, setData] = useState([]);\r\n  const [summary, setSummary] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch data from backend\r\n    axios\r\n      .get(\"http://localhost:3000/data\")\r\n      .then((response) => {\r\n        setData(response.data);\r\n        generateSummary(response.data);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching data:\", error));\r\n  }, []);\r\n\r\n  const generateSummary = (data) => {\r\n    if (data.length < 1) return;\r\n\r\n    const headers = data[0]; // First row contains headers\r\n    const summary = headers.map((columnName, index) => {\r\n      const columnData = data.slice(1).map((row) => row[index]); // Data excluding headers\r\n      const dataType = columnData.every((value) => !isNaN(value)) ? \"Number\" : \"String\";\r\n      const missingValues = columnData.filter(\r\n        (value) => value === undefined || value === null || value.trim() === \"\"\r\n      ).length;\r\n      const duplicates = new Set(columnData).size !== columnData.length;\r\n      const statistics = dataType === \"Number\" ? calculateStatistics(columnData) : {};\r\n\r\n      return {\r\n        columnName,\r\n        dataType,\r\n        missingValues,\r\n        duplicates,\r\n        ...statistics,\r\n      };\r\n    });\r\n\r\n    setSummary(summary);\r\n  };\r\n\r\n  const calculateStatistics = (data) => {\r\n    const numbers = data.filter((value) => !isNaN(value)).map(Number);\r\n    if (numbers.length === 0) return {};\r\n    const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\r\n    const min = Math.min(...numbers);\r\n    const max = Math.max(...numbers);\r\n    return { mean, min, max };\r\n  };\r\n\r\n  return (\r\n    <div className=\"preview-and-profiling\">\r\n      <h2>Preview and Profiling</h2>\r\n\r\n      {/* Data Preview */}\r\n      <div className=\"data-preview\">\r\n        <h3>Data Preview</h3>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              {data[0]?.map((header, index) => (\r\n                <th key={index}>{header}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.slice(1).map((row, rowIndex) => (\r\n              <tr key={rowIndex}>\r\n                {row.map((cell, cellIndex) => (\r\n                  <td key={cellIndex}>{cell}</td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {/* Summary Report */}\r\n      {summary && (\r\n        <div className=\"data-summary\">\r\n          <h3>Summary Report</h3>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Column Name</th>\r\n                <th>Data Type</th>\r\n                <th>Missing Values</th>\r\n                <th>Duplicates</th>\r\n                <th>Mean</th>\r\n                <th>Min</th>\r\n                <th>Max</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {summary.map((col, index) => (\r\n                <tr key={index}>\r\n                  <td>{col.columnName}</td>\r\n                  <td>{col.dataType}</td>\r\n                  <td>{col.missingValues}</td>\r\n                  <td>{col.duplicates ? \"Yes\" : \"No\"}</td>\r\n                  <td>{col.mean !== undefined ? col.mean.toFixed(2) : \"-\"}</td>\r\n                  <td>{col.min !== undefined ? col.min : \"-\"}</td>\r\n                  <td>{col.max !== undefined ? col.max : \"-\"}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PreviewAndProfile;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}