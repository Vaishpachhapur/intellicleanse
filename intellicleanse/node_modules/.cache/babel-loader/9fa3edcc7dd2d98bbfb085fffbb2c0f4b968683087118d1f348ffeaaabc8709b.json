{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\intellicleanse\\\\intellicleanse\\\\src\\\\components\\\\Sidebar.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\"; // Import useLocation for current path\n// import \"./Sidebar.css\"; // Import the CSS file for styling\n\n// const Sidebar = ({ functionalities, onFunctionalityClick }) => {\n//   const [collapsed, setCollapsed] = useState(false);\n//   const location = useLocation(); // Get the current route path\n\n//   // Define the paths where the sidebar should NOT be visible\n//   const pathsWithoutNav = [\"/\",\"/login\",\"/signup\", \"/contact\", \"\"];\n\n//   // Toggle collapse state\n//   const toggleSidebar = () => {\n//     setCollapsed(!collapsed);\n//   };\n\n//   // Check if the current path is one of the paths without navigation\n//   const isSidebarVisible = !pathsWithoutNav.includes(location.pathname);\n\n//   return (\n//     <>\n//       <br />\n//       <br />\n//       <br />\n//       <br />\n\n//       {/* Conditionally render Sidebar based on current path */}\n//       {isSidebarVisible && (\n//         <div className={`sidebar ${collapsed ? \"collapsed\" : \"\"}`}>\n//           <button className=\"collapse-btn\" onClick={toggleSidebar}>\n//             {collapsed ? \">\" : \"<\"} {/* Icon indicating collapse/expand */}\n//           </button>\n//           <ul>\n//             {functionalities.map((func, index) => (\n//               <li key={index} onClick={() => onFunctionalityClick(func)}>\n//                 {func}\n//               </li>\n//             ))}\n//           </ul>\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// export default Sidebar;\n\nimport React, { useState } from \"react\";\nimport \"./Sidebar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Sidebar = _ref => {\n  _s();\n  let {\n    functionalities,\n    onFunctionalityClick\n  } = _ref;\n  // State to track whether the sidebar is collapsed or not\n  const [collapsed, setCollapsed] = useState(false);\n\n  // Toggle the collapsed state\n  const toggleSidebar = () => {\n    setCollapsed(!collapsed);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `sidebar ${collapsed ? \"collapsed\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-toggle\",\n      onClick: toggleSidebar,\n      children: collapsed ? \"→\" : \"←\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: `sidebar-list ${collapsed ? \"collapsed\" : \"\"}`,\n      children: functionalities.map((func, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => onFunctionalityClick(func),\n        children: func\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Sidebar, \"IaHwFfvbaw8y79e5do0CzWS1eXc=\");\n_c = Sidebar;\nexport default Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useState","Sidebar","functionalities","onFunctionalityClick","collapsed","setCollapsed","toggleSidebar","map","func","index"],"sources":["C:/xampp/htdocs/intellicleanse/intellicleanse/src/components/Sidebar.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\"; // Import useLocation for current path\r\n// import \"./Sidebar.css\"; // Import the CSS file for styling\r\n\r\n// const Sidebar = ({ functionalities, onFunctionalityClick }) => {\r\n//   const [collapsed, setCollapsed] = useState(false);\r\n//   const location = useLocation(); // Get the current route path\r\n\r\n//   // Define the paths where the sidebar should NOT be visible\r\n//   const pathsWithoutNav = [\"/\",\"/login\",\"/signup\", \"/contact\", \"\"];\r\n\r\n//   // Toggle collapse state\r\n//   const toggleSidebar = () => {\r\n//     setCollapsed(!collapsed);\r\n//   };\r\n\r\n//   // Check if the current path is one of the paths without navigation\r\n//   const isSidebarVisible = !pathsWithoutNav.includes(location.pathname);\r\n\r\n//   return (\r\n//     <>\r\n//       <br />\r\n//       <br />\r\n//       <br />\r\n//       <br />\r\n\r\n//       {/* Conditionally render Sidebar based on current path */}\r\n//       {isSidebarVisible && (\r\n//         <div className={`sidebar ${collapsed ? \"collapsed\" : \"\"}`}>\r\n//           <button className=\"collapse-btn\" onClick={toggleSidebar}>\r\n//             {collapsed ? \">\" : \"<\"} {/* Icon indicating collapse/expand */}\r\n//           </button>\r\n//           <ul>\r\n//             {functionalities.map((func, index) => (\r\n//               <li key={index} onClick={() => onFunctionalityClick(func)}>\r\n//                 {func}\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n//         </div>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Sidebar;\r\n\r\nimport React, { useState } from \"react\";\r\nimport \"./Sidebar.css\";\r\n\r\nconst Sidebar = ({ functionalities, onFunctionalityClick }) => {\r\n  // State to track whether the sidebar is collapsed or not\r\n  const [collapsed, setCollapsed] = useState(false);\r\n\r\n  // Toggle the collapsed state\r\n  const toggleSidebar = () => {\r\n    setCollapsed(!collapsed);\r\n  };\r\n\r\n  return (\r\n    <div className={`sidebar ${collapsed ? \"collapsed\" : \"\"}`}>\r\n      <div className=\"sidebar-toggle\" onClick={toggleSidebar}>\r\n        {/* Icon or text to indicate toggle */}\r\n        {collapsed ? \"→\" : \"←\"}\r\n      </div>\r\n      <ul className={`sidebar-list ${collapsed ? \"collapsed\" : \"\"}`}>\r\n        {functionalities.map((func, index) => (\r\n          <li key={index} onClick={() => onFunctionalityClick(func)}>\r\n            {func}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,eAAe;AAAC;AAEvB,MAAMC,OAAO,GAAG,QAA+C;EAAA;EAAA,IAA9C;IAAEC,eAAe;IAAEC;EAAqB,CAAC;EACxD;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAMM,aAAa,GAAG,MAAM;IAC1BD,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;EAED,oBACE;IAAK,SAAS,EAAG,WAAUA,SAAS,GAAG,WAAW,GAAG,EAAG,EAAE;IAAA,wBACxD;MAAK,SAAS,EAAC,gBAAgB;MAAC,OAAO,EAAEE,aAAc;MAAA,UAEpDF,SAAS,GAAG,GAAG,GAAG;IAAG;MAAA;MAAA;MAAA;IAAA,QAClB,eACN;MAAI,SAAS,EAAG,gBAAeA,SAAS,GAAG,WAAW,GAAG,EAAG,EAAE;MAAA,UAC3DF,eAAe,CAACK,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC/B;QAAgB,OAAO,EAAE,MAAMN,oBAAoB,CAACK,IAAI,CAAE;QAAA,UACvDA;MAAI,GADEC,KAAK;QAAA;QAAA;QAAA;MAAA,QAGf;IAAC;MAAA;MAAA;MAAA;IAAA,QACC;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEV,CAAC;AAAC,GAxBIR,OAAO;AAAA,KAAPA,OAAO;AA0Bb,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}