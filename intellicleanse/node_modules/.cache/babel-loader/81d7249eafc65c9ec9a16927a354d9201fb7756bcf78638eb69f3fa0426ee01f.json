{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst bcrypt = require('bcryptjs');\nconst mysql = require('mysql');\nconst app = express();\napp.use(cors());\napp.use(bodyParser.json());\n\n// Database connection\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'intellicleanse'\n});\ndb.connect(err => {\n  if (err) throw err;\n  console.log('Connected to the database');\n});\n\n// Signup route\napp.post('/signup', (req, res) => {\n  const {\n    email,\n    username,\n    password\n  } = req.body;\n\n  // Check if the email already exists\n  const checkEmailQuery = 'SELECT * FROM users WHERE email = ?';\n  db.query(checkEmailQuery, [email], (err, results) => {\n    if (err) {\n      res.status(500).json({\n        message: 'Database error during email check'\n      });\n      return;\n    }\n    if (results.length > 0) {\n      res.status(400).json({\n        message: 'Email already exists'\n      });\n      return;\n    }\n\n    // Hash the password\n    bcrypt.hash(password, 10, (err, hashedPassword) => {\n      if (err) {\n        res.status(500).json({\n          message: 'Error hashing password'\n        });\n        return;\n      }\n\n      // Insert the new user into the database\n      const query = 'INSERT INTO users (email, username, password) VALUES (?, ?, ?)';\n      db.query(query, [email, username, hashedPassword], (err, result) => {\n        if (err) {\n          res.status(500).json({\n            message: 'Database error during user insertion'\n          });\n        } else {\n          res.status(201).json({\n            message: 'User registered successfully'\n          });\n        }\n      });\n    });\n  });\n});\n\n// Start the server\napp.listen(3001, () => {\n  console.log('Server running on http://localhost:3001');\n});","map":{"version":3,"names":["express","require","cors","bodyParser","bcrypt","mysql","app","use","json","db","createConnection","host","user","password","database","connect","err","console","log","post","req","res","email","username","body","checkEmailQuery","query","results","status","message","length","hash","hashedPassword","result","listen"],"sources":["D:/Downloads/React-Landing-Page-Template-master/React-Landing-Page-Template-master/src/server.js"],"sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst bodyParser = require('body-parser');\r\nconst bcrypt = require('bcryptjs');\r\nconst mysql = require('mysql');\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// Database connection\r\nconst db = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'root',\r\n  password: '',\r\n  database: 'intellicleanse',\r\n});\r\n\r\ndb.connect((err) => {\r\n  if (err) throw err;\r\n  console.log('Connected to the database');\r\n});\r\n\r\n// Signup route\r\napp.post('/signup', (req, res) => {\r\n  const { email, username, password } = req.body;\r\n\r\n  // Check if the email already exists\r\n  const checkEmailQuery = 'SELECT * FROM users WHERE email = ?';\r\n  db.query(checkEmailQuery, [email], (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ message: 'Database error during email check' });\r\n      return;\r\n    }\r\n\r\n    if (results.length > 0) {\r\n      res.status(400).json({ message: 'Email already exists' });\r\n      return;\r\n    }\r\n\r\n    // Hash the password\r\n    bcrypt.hash(password, 10, (err, hashedPassword) => {\r\n      if (err) {\r\n        res.status(500).json({ message: 'Error hashing password' });\r\n        return;\r\n      }\r\n\r\n      // Insert the new user into the database\r\n      const query = 'INSERT INTO users (email, username, password) VALUES (?, ?, ?)';\r\n      db.query(query, [email, username, hashedPassword], (err, result) => {\r\n        if (err) {\r\n          res.status(500).json({ message: 'Database error during user insertion' });\r\n        } else {\r\n          res.status(201).json({ message: 'User registered successfully' });\r\n        }\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n// Start the server\r\napp.listen(3001, () => {\r\n  console.log('Server running on http://localhost:3001');\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAO,CAAC;AAE9B,MAAMK,GAAG,GAAGN,OAAO,EAAE;AACrBM,GAAG,CAACC,GAAG,CAACL,IAAI,EAAE,CAAC;AACfI,GAAG,CAACC,GAAG,CAACJ,UAAU,CAACK,IAAI,EAAE,CAAC;;AAE1B;AACA,MAAMC,EAAE,GAAGJ,KAAK,CAACK,gBAAgB,CAAC;EAChCC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE;AACZ,CAAC,CAAC;AAEFL,EAAE,CAACM,OAAO,CAAEC,GAAG,IAAK;EAClB,IAAIA,GAAG,EAAE,MAAMA,GAAG;EAClBC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;AAC1C,CAAC,CAAC;;AAEF;AACAZ,GAAG,CAACa,IAAI,CAAC,SAAS,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAChC,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEV;EAAS,CAAC,GAAGO,GAAG,CAACI,IAAI;;EAE9C;EACA,MAAMC,eAAe,GAAG,qCAAqC;EAC7DhB,EAAE,CAACiB,KAAK,CAACD,eAAe,EAAE,CAACH,KAAK,CAAC,EAAE,CAACN,GAAG,EAAEW,OAAO,KAAK;IACnD,IAAIX,GAAG,EAAE;MACPK,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACpB,IAAI,CAAC;QAAEqB,OAAO,EAAE;MAAoC,CAAC,CAAC;MACtE;IACF;IAEA,IAAIF,OAAO,CAACG,MAAM,GAAG,CAAC,EAAE;MACtBT,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACpB,IAAI,CAAC;QAAEqB,OAAO,EAAE;MAAuB,CAAC,CAAC;MACzD;IACF;;IAEA;IACAzB,MAAM,CAAC2B,IAAI,CAAClB,QAAQ,EAAE,EAAE,EAAE,CAACG,GAAG,EAAEgB,cAAc,KAAK;MACjD,IAAIhB,GAAG,EAAE;QACPK,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACpB,IAAI,CAAC;UAAEqB,OAAO,EAAE;QAAyB,CAAC,CAAC;QAC3D;MACF;;MAEA;MACA,MAAMH,KAAK,GAAG,gEAAgE;MAC9EjB,EAAE,CAACiB,KAAK,CAACA,KAAK,EAAE,CAACJ,KAAK,EAAEC,QAAQ,EAAES,cAAc,CAAC,EAAE,CAAChB,GAAG,EAAEiB,MAAM,KAAK;QAClE,IAAIjB,GAAG,EAAE;UACPK,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACpB,IAAI,CAAC;YAAEqB,OAAO,EAAE;UAAuC,CAAC,CAAC;QAC3E,CAAC,MAAM;UACLR,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACpB,IAAI,CAAC;YAAEqB,OAAO,EAAE;UAA+B,CAAC,CAAC;QACnE;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAvB,GAAG,CAAC4B,MAAM,CAAC,IAAI,EAAE,MAAM;EACrBjB,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;AACxD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}