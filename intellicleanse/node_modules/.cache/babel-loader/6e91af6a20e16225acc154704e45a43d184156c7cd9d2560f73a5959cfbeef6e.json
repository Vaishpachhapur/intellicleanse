{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\intellicleanse\\\\intellicleanse\\\\src\\\\components\\\\Sidebar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\"; // Import useLocation for current path\nimport \"./Sidebar.css\"; // Import the CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Sidebar = _ref => {\n  _s();\n  let {\n    functionalities,\n    onFunctionalityClick\n  } = _ref;\n  const [collapsed, setCollapsed] = useState(false);\n  const location = useLocation(); // Get the current route path\n\n  // Define the paths where the sidebar should NOT be visible\n  const pathsWithoutNav = [\"/\", \"/log\"];\n\n  // Toggle collapse state\n  const toggleSidebar = () => {\n    setCollapsed(!collapsed);\n  };\n\n  // Check if the current path is one of the paths without navigation\n  const isSidebarVisible = !pathsWithoutNav.includes(location.pathname);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), isSidebarVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `sidebar ${collapsed ? \"collapsed\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"collapse-btn\",\n        onClick: toggleSidebar,\n        children: [collapsed ? \">\" : \"<\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: functionalities.map((func, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => onFunctionalityClick(func),\n          children: func\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Sidebar, \"M24aVN03NbuLnzcLR3BFPT8KpiQ=\", false, function () {\n  return [useLocation];\n});\n_c = Sidebar;\nexport default Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","Sidebar","functionalities","onFunctionalityClick","collapsed","setCollapsed","location","pathsWithoutNav","toggleSidebar","isSidebarVisible","includes","pathname","map","func","index"],"sources":["C:/xampp/htdocs/intellicleanse/intellicleanse/src/components/Sidebar.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\"; // Import useLocation for current path\r\nimport \"./Sidebar.css\"; // Import the CSS file for styling\r\n\r\nconst Sidebar = ({ functionalities, onFunctionalityClick }) => {\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  const location = useLocation(); // Get the current route path\r\n\r\n  // Define the paths where the sidebar should NOT be visible\r\n  const pathsWithoutNav = [\"/\",\"/log\" ];\r\n\r\n  // Toggle collapse state\r\n  const toggleSidebar = () => {\r\n    setCollapsed(!collapsed);\r\n  };\r\n\r\n  // Check if the current path is one of the paths without navigation\r\n  const isSidebarVisible = !pathsWithoutNav.includes(location.pathname);\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n\r\n      {/* Conditionally render Sidebar based on current path */}\r\n      {isSidebarVisible && (\r\n        <div className={`sidebar ${collapsed ? \"collapsed\" : \"\"}`}>\r\n          <button className=\"collapse-btn\" onClick={toggleSidebar}>\r\n            {collapsed ? \">\" : \"<\"} {/* Icon indicating collapse/expand */}\r\n          </button>\r\n          <ul>\r\n            {functionalities.map((func, index) => (\r\n              <li key={index} onClick={() => onFunctionalityClick(func)}>\r\n                {func}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,OAAO,eAAe,CAAC,CAAC;AAAA;AAAA;AAExB,MAAMC,OAAO,GAAG,QAA+C;EAAA;EAAA,IAA9C;IAAEC,eAAe;IAAEC;EAAqB,CAAC;EACxD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMQ,QAAQ,GAAGN,WAAW,EAAE,CAAC,CAAC;;EAEhC;EACA,MAAMO,eAAe,GAAG,CAAC,GAAG,EAAC,MAAM,CAAE;;EAErC;EACA,MAAMC,aAAa,GAAG,MAAM;IAC1BH,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMK,gBAAgB,GAAG,CAACF,eAAe,CAACG,QAAQ,CAACJ,QAAQ,CAACK,QAAQ,CAAC;EAErE,oBACE;IAAA,wBACE;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA;MAAA;MAAA;IAAA,QAAM,EAGLF,gBAAgB,iBACf;MAAK,SAAS,EAAG,WAAUL,SAAS,GAAG,WAAW,GAAG,EAAG,EAAE;MAAA,wBACxD;QAAQ,SAAS,EAAC,cAAc;QAAC,OAAO,EAAEI,aAAc;QAAA,WACrDJ,SAAS,GAAG,GAAG,GAAG,GAAG,EAAC,GAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QACjB,eACT;QAAA,UACGF,eAAe,CAACU,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC/B;UAAgB,OAAO,EAAE,MAAMX,oBAAoB,CAACU,IAAI,CAAE;UAAA,UACvDA;QAAI,GADEC,KAAK;UAAA;UAAA;UAAA;QAAA,QAGf;MAAC;QAAA;QAAA;QAAA;MAAA,QACC;IAAA;MAAA;MAAA;MAAA;IAAA,QAER;EAAA,gBACA;AAEP,CAAC;AAAC,GAvCIb,OAAO;EAAA,QAEMD,WAAW;AAAA;AAAA,KAFxBC,OAAO;AAyCb,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}