{"ast":null,"code":"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // Change this from useHistory to useNavigate\nimport \"./signup.css\";\napp.post(\"/Signup\", (req, res) => {\n  const {\n    email,\n    username,\n    password\n  } = req.body;\n  console.log(\"Signup data received:\", {\n    email,\n    username,\n    password\n  }); // Log all received data\n\n  if (!email || !username || !password) {\n    console.log(\"Missing fields:\", {\n      email,\n      username,\n      password\n    });\n    return res.status(400).json({\n      message: \"All fields are required\"\n    });\n  }\n\n  // Check if the email already exists\n  const checkEmailQuery = \"SELECT * FROM users WHERE email = ?\";\n  db.query(checkEmailQuery, [email], (err, results) => {\n    if (err) {\n      console.error(\"Database error during email check:\", err.message);\n      return res.status(500).json({\n        message: \"Internal server error\"\n      });\n    }\n    if (results.length > 0) {\n      console.log(\"Email already exists:\", email);\n      return res.status(400).json({\n        message: \"Email already exists\"\n      });\n    }\n\n    // Hash the password\n    bcrypt.hash(password, 10, (err, hashedPassword) => {\n      if (err) {\n        console.error(\"Error hashing password:\", err.message);\n        return res.status(500).json({\n          message: \"Internal server error\"\n        });\n      }\n\n      // Insert the new user into the database\n      const insertUserQuery = \"INSERT INTO users (email, username, password) VALUES (?, ?, ?)\";\n      db.query(insertUserQuery, [email, username, hashedPassword], (err, result) => {\n        if (err) {\n          console.error(\"Database error during user insertion:\", err.message);\n          return res.status(500).json({\n            message: \"Internal server error\"\n          });\n        }\n        console.log(\"User registered successfully:\", {\n          email,\n          username,\n          userId: result.insertId\n        });\n        res.status(201).json({\n          message: \"User registered successfully\"\n        });\n      });\n    });\n  });\n});\nexport default Signup;","map":{"version":3,"names":["React","useState","useNavigate","app","post","req","res","email","username","password","body","console","log","status","json","message","checkEmailQuery","db","query","err","results","error","length","bcrypt","hash","hashedPassword","insertUserQuery","result","userId","insertId","Signup"],"sources":["C:/xampp/htdocs/intellicleanse/intellicleanse/src/components/Signup.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport { useNavigate } from \"react-router-dom\"; // Change this from useHistory to useNavigate\r\nimport \"./signup.css\";\r\n\r\napp.post(\"/Signup\", (req, res) => {\r\n  const { email, username, password } = req.body;\r\n\r\n  console.log(\"Signup data received:\", { email, username, password }); // Log all received data\r\n\r\n  if (!email || !username || !password) {\r\n    console.log(\"Missing fields:\", { email, username, password });\r\n    return res.status(400).json({ message: \"All fields are required\" });\r\n  }\r\n\r\n  // Check if the email already exists\r\n  const checkEmailQuery = \"SELECT * FROM users WHERE email = ?\";\r\n  db.query(checkEmailQuery, [email], (err, results) => {\r\n    if (err) {\r\n      console.error(\"Database error during email check:\", err.message);\r\n      return res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n\r\n    if (results.length > 0) {\r\n      console.log(\"Email already exists:\", email);\r\n      return res.status(400).json({ message: \"Email already exists\" });\r\n    }\r\n\r\n    // Hash the password\r\n    bcrypt.hash(password, 10, (err, hashedPassword) => {\r\n      if (err) {\r\n        console.error(\"Error hashing password:\", err.message);\r\n        return res.status(500).json({ message: \"Internal server error\" });\r\n      }\r\n\r\n      // Insert the new user into the database\r\n      const insertUserQuery =\r\n        \"INSERT INTO users (email, username, password) VALUES (?, ?, ?)\";\r\n      db.query(insertUserQuery, [email, username, hashedPassword], (err, result) => {\r\n        if (err) {\r\n          console.error(\"Database error during user insertion:\", err.message);\r\n          return res.status(500).json({ message: \"Internal server error\" });\r\n        }\r\n\r\n        console.log(\"User registered successfully:\", {\r\n          email,\r\n          username,\r\n          userId: result.insertId,\r\n        });\r\n        res.status(201).json({ message: \"User registered successfully\" });\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\nexport default Signup;"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,OAAO,cAAc;AAErBC,GAAG,CAACC,IAAI,CAAC,SAAS,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAChC,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGJ,GAAG,CAACK,IAAI;EAE9CC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE;IAAEL,KAAK;IAAEC,QAAQ;IAAEC;EAAS,CAAC,CAAC,CAAC,CAAC;;EAErE,IAAI,CAACF,KAAK,IAAI,CAACC,QAAQ,IAAI,CAACC,QAAQ,EAAE;IACpCE,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE;MAAEL,KAAK;MAAEC,QAAQ;MAAEC;IAAS,CAAC,CAAC;IAC7D,OAAOH,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA0B,CAAC,CAAC;EACrE;;EAEA;EACA,MAAMC,eAAe,GAAG,qCAAqC;EAC7DC,EAAE,CAACC,KAAK,CAACF,eAAe,EAAE,CAACT,KAAK,CAAC,EAAE,CAACY,GAAG,EAAEC,OAAO,KAAK;IACnD,IAAID,GAAG,EAAE;MACPR,OAAO,CAACU,KAAK,CAAC,oCAAoC,EAAEF,GAAG,CAACJ,OAAO,CAAC;MAChE,OAAOT,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAwB,CAAC,CAAC;IACnE;IAEA,IAAIK,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;MACtBX,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEL,KAAK,CAAC;MAC3C,OAAOD,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAuB,CAAC,CAAC;IAClE;;IAEA;IACAQ,MAAM,CAACC,IAAI,CAACf,QAAQ,EAAE,EAAE,EAAE,CAACU,GAAG,EAAEM,cAAc,KAAK;MACjD,IAAIN,GAAG,EAAE;QACPR,OAAO,CAACU,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAACJ,OAAO,CAAC;QACrD,OAAOT,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,OAAO,EAAE;QAAwB,CAAC,CAAC;MACnE;;MAEA;MACA,MAAMW,eAAe,GACnB,gEAAgE;MAClET,EAAE,CAACC,KAAK,CAACQ,eAAe,EAAE,CAACnB,KAAK,EAAEC,QAAQ,EAAEiB,cAAc,CAAC,EAAE,CAACN,GAAG,EAAEQ,MAAM,KAAK;QAC5E,IAAIR,GAAG,EAAE;UACPR,OAAO,CAACU,KAAK,CAAC,uCAAuC,EAAEF,GAAG,CAACJ,OAAO,CAAC;UACnE,OAAOT,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;YAAEC,OAAO,EAAE;UAAwB,CAAC,CAAC;QACnE;QAEAJ,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE;UAC3CL,KAAK;UACLC,QAAQ;UACRoB,MAAM,EAAED,MAAM,CAACE;QACjB,CAAC,CAAC;QACFvB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,OAAO,EAAE;QAA+B,CAAC,CAAC;MACnE,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,eAAee,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}