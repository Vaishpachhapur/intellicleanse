{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { Bar } from \"react-chartjs-2\";\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   Tooltip,\n//   Legend,\n// } from \"chart.js\";\n// import \"./PreviewAndProfiling.css\";\n\n// // Register chart.js components\n// ChartJS.register(CategoryScale, LinearScale, BarElement, Tooltip, Legend);\n\n// const PreviewAndProfile = () => {\n//   const [data, setData] = useState([]);\n//   const [summary, setSummary] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     axios\n//       .get(\"http://localhost:3000/data\")\n//       .then((response) => {\n//         const fetchedData = response.data;\n//         if (fetchedData.length > 0) {\n//           setData(fetchedData);\n//           generateSummary(fetchedData);\n//         } else {\n//           setError(\"No data available\");\n//         }\n//       })\n//       .catch((err) => {\n//         console.error(\"Error fetching data:\", err);\n//         setError(\"Failed to fetch data\");\n//       })\n//       .finally(() => {\n//         setLoading(false);\n//       });\n//   }, []);\n\n//   const generateSummary = (data) => {\n//     const headers = data[0];\n//     const summary = headers.map((columnName, index) => {\n//       const columnData = data\n//         .slice(1)\n//         .map((row) => row[index]?.trim() || \"\"); // Handle undefined/null values\n//       const isNumeric = columnData.every((value) => value && !isNaN(value));\n//       const missingValues = columnData.filter((value) => value === \"\").length;\n//       const uniqueValues = new Set(columnData).size;\n//       const duplicates = columnData.length > uniqueValues;\n//       const statistics = isNumeric ? calculateStatistics(columnData) : {};\n\n//       return {\n//         columnName,\n//         dataType: isNumeric ? \"Number\" : \"String\",\n//         missingValues,\n//         duplicates,\n//         ...statistics,\n//       };\n//     });\n\n//     setSummary(summary);\n//   };\n\n//   const calculateStatistics = (data) => {\n//     const numbers = data.filter((value) => !isNaN(value)).map(Number);\n//     if (numbers.length === 0) return {};\n//     const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n//     const min = Math.min(...numbers);\n//     const max = Math.max(...numbers);\n//     return { mean, min, max };\n//   };\n\n//   if (loading) {\n//     return <div>Loading data...</div>;\n//   }\n\n//   if (error) {\n//     return <div>Error: {error}</div>;\n//   }\n\n//   const renderVisuals = () => {\n//     const numericColumns = summary.filter((col) => col.dataType === \"Number\");\n//     if (numericColumns.length === 0) {\n//       return <p>No numeric data available for visualization.</p>;\n//     }\n\n//     return (\n//       <div className=\"visual-statistics\">\n//         <h3>Visual Statistics</h3>\n//         {numericColumns.map((col, index) => (\n//           <div key={index} className=\"chart-container\">\n//             <h4>{col.columnName}</h4>\n//             <Bar\n//               data={{\n//                 labels: [\"Mean\", \"Min\", \"Max\"],\n//                 datasets: [\n//                   {\n//                     label: col.columnName,\n//                     data: [col.mean, col.min, col.max],\n//                     backgroundColor: [\"#4caf50\", \"#2196f3\", \"#ff5722\"],\n//                   },\n//                 ],\n//               }}\n//               options={{\n//                 responsive: true,\n//                 plugins: {\n//                   legend: { display: false },\n//                 },\n//               }}\n//             />\n//           </div>\n//         ))}\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"preview-and-profiling\">\n//       <h2>Preview and Profiling</h2>\n\n//       <div className=\"data-preview\">\n//         <h3>Data Preview</h3>\n//         {data.length > 1 ? (\n//           <table>\n//             <thead>\n//               <tr>\n//                 {data[0]?.map((header, index) => (\n//                   <th key={index}>{header}</th>\n//                 ))}\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {data.slice(1).map((row, rowIndex) => (\n//                 <tr key={rowIndex}>\n//                   {row.map((cell, cellIndex) => (\n//                     <td key={cellIndex}>{cell || \"-\"}</td>\n//                   ))}\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         ) : (\n//           <p>No data to display</p>\n//         )}\n//       </div>\n\n//       {summary && (\n//         <div className=\"data-summary\">\n//           <h3>Summary Report</h3>\n//           <table>\n//             <thead>\n//               <tr>\n//                 <th>Column Name</th>\n//                 <th>Data Type</th>\n//                 <th>Missing Values</th>\n//                 <th>Duplicates</th>\n//                 <th>Mean</th>\n//                 <th>Min</th>\n//                 <th>Max</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {summary.map((col, index) => (\n//                 <tr key={index}>\n//                   <td>{col.columnName}</td>\n//                   <td>{col.dataType}</td>\n//                   <td>{col.missingValues}</td>\n//                   <td>{col.duplicates ? \"Yes\" : \"No\"}</td>\n//                   <td>{col.mean !== undefined ? col.mean.toFixed(2) : \"-\"}</td>\n//                   <td>{col.min !== undefined ? col.min : \"-\"}</td>\n//                   <td>{col.max !== undefined ? col.max : \"-\"}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n//       )}\n\n//       {summary && renderVisuals()}\n//     </div>\n//   );\n// };\n\n// export default PreviewAndProfile;","map":{"version":3,"names":[],"sources":["C:/xampp/htdocs/intellicleanse/intellicleanse/src/components/PreviewAndProfiling.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { Bar } from \"react-chartjs-2\";\r\n// import {\r\n//   Chart as ChartJS,\r\n//   CategoryScale,\r\n//   LinearScale,\r\n//   BarElement,\r\n//   Tooltip,\r\n//   Legend,\r\n// } from \"chart.js\";\r\n// import \"./PreviewAndProfiling.css\";\r\n\r\n// // Register chart.js components\r\n// ChartJS.register(CategoryScale, LinearScale, BarElement, Tooltip, Legend);\r\n\r\n// const PreviewAndProfile = () => {\r\n//   const [data, setData] = useState([]);\r\n//   const [summary, setSummary] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     axios\r\n//       .get(\"http://localhost:3000/data\")\r\n//       .then((response) => {\r\n//         const fetchedData = response.data;\r\n//         if (fetchedData.length > 0) {\r\n//           setData(fetchedData);\r\n//           generateSummary(fetchedData);\r\n//         } else {\r\n//           setError(\"No data available\");\r\n//         }\r\n//       })\r\n//       .catch((err) => {\r\n//         console.error(\"Error fetching data:\", err);\r\n//         setError(\"Failed to fetch data\");\r\n//       })\r\n//       .finally(() => {\r\n//         setLoading(false);\r\n//       });\r\n//   }, []);\r\n\r\n//   const generateSummary = (data) => {\r\n//     const headers = data[0];\r\n//     const summary = headers.map((columnName, index) => {\r\n//       const columnData = data\r\n//         .slice(1)\r\n//         .map((row) => row[index]?.trim() || \"\"); // Handle undefined/null values\r\n//       const isNumeric = columnData.every((value) => value && !isNaN(value));\r\n//       const missingValues = columnData.filter((value) => value === \"\").length;\r\n//       const uniqueValues = new Set(columnData).size;\r\n//       const duplicates = columnData.length > uniqueValues;\r\n//       const statistics = isNumeric ? calculateStatistics(columnData) : {};\r\n\r\n//       return {\r\n//         columnName,\r\n//         dataType: isNumeric ? \"Number\" : \"String\",\r\n//         missingValues,\r\n//         duplicates,\r\n//         ...statistics,\r\n//       };\r\n//     });\r\n\r\n//     setSummary(summary);\r\n//   };\r\n\r\n//   const calculateStatistics = (data) => {\r\n//     const numbers = data.filter((value) => !isNaN(value)).map(Number);\r\n//     if (numbers.length === 0) return {};\r\n//     const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\r\n//     const min = Math.min(...numbers);\r\n//     const max = Math.max(...numbers);\r\n//     return { mean, min, max };\r\n//   };\r\n\r\n//   if (loading) {\r\n//     return <div>Loading data...</div>;\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <div>Error: {error}</div>;\r\n//   }\r\n\r\n//   const renderVisuals = () => {\r\n//     const numericColumns = summary.filter((col) => col.dataType === \"Number\");\r\n//     if (numericColumns.length === 0) {\r\n//       return <p>No numeric data available for visualization.</p>;\r\n//     }\r\n\r\n//     return (\r\n//       <div className=\"visual-statistics\">\r\n//         <h3>Visual Statistics</h3>\r\n//         {numericColumns.map((col, index) => (\r\n//           <div key={index} className=\"chart-container\">\r\n//             <h4>{col.columnName}</h4>\r\n//             <Bar\r\n//               data={{\r\n//                 labels: [\"Mean\", \"Min\", \"Max\"],\r\n//                 datasets: [\r\n//                   {\r\n//                     label: col.columnName,\r\n//                     data: [col.mean, col.min, col.max],\r\n//                     backgroundColor: [\"#4caf50\", \"#2196f3\", \"#ff5722\"],\r\n//                   },\r\n//                 ],\r\n//               }}\r\n//               options={{\r\n//                 responsive: true,\r\n//                 plugins: {\r\n//                   legend: { display: false },\r\n//                 },\r\n//               }}\r\n//             />\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"preview-and-profiling\">\r\n//       <h2>Preview and Profiling</h2>\r\n\r\n//       <div className=\"data-preview\">\r\n//         <h3>Data Preview</h3>\r\n//         {data.length > 1 ? (\r\n//           <table>\r\n//             <thead>\r\n//               <tr>\r\n//                 {data[0]?.map((header, index) => (\r\n//                   <th key={index}>{header}</th>\r\n//                 ))}\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {data.slice(1).map((row, rowIndex) => (\r\n//                 <tr key={rowIndex}>\r\n//                   {row.map((cell, cellIndex) => (\r\n//                     <td key={cellIndex}>{cell || \"-\"}</td>\r\n//                   ))}\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         ) : (\r\n//           <p>No data to display</p>\r\n//         )}\r\n//       </div>\r\n\r\n//       {summary && (\r\n//         <div className=\"data-summary\">\r\n//           <h3>Summary Report</h3>\r\n//           <table>\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Column Name</th>\r\n//                 <th>Data Type</th>\r\n//                 <th>Missing Values</th>\r\n//                 <th>Duplicates</th>\r\n//                 <th>Mean</th>\r\n//                 <th>Min</th>\r\n//                 <th>Max</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {summary.map((col, index) => (\r\n//                 <tr key={index}>\r\n//                   <td>{col.columnName}</td>\r\n//                   <td>{col.dataType}</td>\r\n//                   <td>{col.missingValues}</td>\r\n//                   <td>{col.duplicates ? \"Yes\" : \"No\"}</td>\r\n//                   <td>{col.mean !== undefined ? col.mean.toFixed(2) : \"-\"}</td>\r\n//                   <td>{col.min !== undefined ? col.min : \"-\"}</td>\r\n//                   <td>{col.max !== undefined ? col.max : \"-\"}</td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       )}\r\n\r\n//       {summary && renderVisuals()}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PreviewAndProfile;\r\n\r\n\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}