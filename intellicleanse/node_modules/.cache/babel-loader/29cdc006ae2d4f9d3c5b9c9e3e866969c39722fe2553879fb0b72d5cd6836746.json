{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\intellicleanse\\\\intellicleanse\\\\src\\\\components\\\\PreviewAndProfiling.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './PreviewAndProfil.css'; // Correct path for the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PreviewAndProfile = () => {\n  _s();\n  var _data$;\n  const [data, setData] = useState([]);\n  const [summary, setSummary] = useState(null);\n  useEffect(() => {\n    axios.get('http://localhost:3000/data').then(response => {\n      setData(response.data);\n      generateSummary(response.data);\n    }).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  const generateSummary = data => {\n    if (data.length < 1) return;\n    const headers = data[0];\n    const summary = headers.map((columnName, index) => {\n      const columnData = data.slice(1).map(row => row[index]);\n      const dataType = columnData.every(value => !isNaN(value)) ? \"Number\" : \"String\";\n      const missingValues = columnData.filter(value => value === undefined || value === null || value === \"\").length;\n      const duplicates = new Set(columnData).size !== columnData.length;\n      return {\n        columnName,\n        dataType,\n        missingValues,\n        duplicates\n      };\n    });\n    setSummary(summary);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"preview-and-profiling\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Preview and Profiling\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-preview\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Data Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: (_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: header\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: data.slice(1).map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: cell\n            }, cellIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 19\n            }, this))\n          }, rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), summary && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Summary Report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Column Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Data Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Missing Values\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Duplicates\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: summary.map((col, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: col.columnName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: col.dataType\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: col.missingValues\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: col.duplicates ? \"Yes\" : \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(PreviewAndProfile, \"eyHPvhcC2JtAiV+oypF+paaHJ8M=\");\n_c = PreviewAndProfile;\nexport default PreviewAndProfile;\nvar _c;\n$RefreshReg$(_c, \"PreviewAndProfile\");","map":{"version":3,"names":["React","useState","useEffect","axios","PreviewAndProfile","data","setData","summary","setSummary","get","then","response","generateSummary","catch","error","console","length","headers","map","columnName","index","columnData","slice","row","dataType","every","value","isNaN","missingValues","filter","undefined","duplicates","Set","size","header","rowIndex","cell","cellIndex","col"],"sources":["C:/xampp/htdocs/intellicleanse/intellicleanse/src/components/PreviewAndProfiling.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './PreviewAndProfil.css'; // Correct path for the CSS file\r\n\r\n\r\nconst PreviewAndProfile = () => {\r\n  const [data, setData] = useState([]);\r\n  const [summary, setSummary] = useState(null);\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:3000/data')\r\n      .then(response => {\r\n        setData(response.data);\r\n        generateSummary(response.data);\r\n      })\r\n      .catch(error => console.error('Error fetching data:', error));\r\n  }, []);\r\n\r\n  const generateSummary = (data) => {\r\n    if (data.length < 1) return;\r\n\r\n    const headers = data[0];\r\n    const summary = headers.map((columnName, index) => {\r\n      const columnData = data.slice(1).map((row) => row[index]);\r\n      const dataType = columnData.every((value) => !isNaN(value)) ? \"Number\" : \"String\";\r\n      const missingValues = columnData.filter((value) => value === undefined || value === null || value === \"\").length;\r\n      const duplicates = new Set(columnData).size !== columnData.length;\r\n\r\n      return {\r\n        columnName,\r\n        dataType,\r\n        missingValues,\r\n        duplicates,\r\n      };\r\n    });\r\n\r\n    setSummary(summary);\r\n  };\r\n\r\n  return (\r\n    <div className=\"preview-and-profiling\">\r\n      <h2>Preview and Profiling</h2>\r\n      <div className=\"data-preview\">\r\n        <h3>Data Preview</h3>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              {data[0]?.map((header, index) => (\r\n                <th key={index}>{header}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.slice(1).map((row, rowIndex) => (\r\n              <tr key={rowIndex}>\r\n                {row.map((cell, cellIndex) => (\r\n                  <td key={cellIndex}>{cell}</td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {summary && (\r\n        <div className=\"data-summary\">\r\n          <h3>Summary Report</h3>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Column Name</th>\r\n                <th>Data Type</th>\r\n                <th>Missing Values</th>\r\n                <th>Duplicates</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {summary.map((col, index) => (\r\n                <tr key={index}>\r\n                  <td>{col.columnName}</td>\r\n                  <td>{col.dataType}</td>\r\n                  <td>{col.missingValues}</td>\r\n                  <td>{col.duplicates ? \"Yes\" : \"No\"}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PreviewAndProfile;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}